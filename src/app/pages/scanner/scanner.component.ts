import { Component } from '@angular/core';
import { AuthService } from '../../core/auth.service';
import { BarcodeFormat } from '@zxing/library';

@Component({
  selector: 'app-scanner',
  standalone: false,
  templateUrl: './scanner.component.html',
  styleUrls: ['./scanner.component.css']
})
export class ScannerComponent {
  // ‚úÖ TODOS LOS FORMATOS POSIBLES PARA DETECTAR CUALQUIER C√ìDIGO
  formats = [
    BarcodeFormat.CODE_128,     // M√°s probable para documentos
    BarcodeFormat.CODE_39,      
    BarcodeFormat.CODE_93,
    BarcodeFormat.CODABAR,      
    BarcodeFormat.ITF,          // Interleaved 2 of 5
    BarcodeFormat.EAN_13,       // Tambi√©n probamos EAN por si acaso
    BarcodeFormat.EAN_8,
    BarcodeFormat.UPC_A,
    BarcodeFormat.UPC_E,
    BarcodeFormat.PDF_417,      // 2D codes tambi√©n
    BarcodeFormat.QR_CODE,
    BarcodeFormat.DATA_MATRIX,
  ];

  devices: MediaDeviceInfo[] = [];
  selectedDevice?: MediaDeviceInfo;
  lastResult: string | null = null;
  lastIgnored: string | null = null;
  torchOn = false;
  torchAvailable = false;
  
  // MODO DEBUG: Lista de todos los c√≥digos le√≠dos
  allScannedCodes: Array<{text: string, format: string, timestamp: Date}> = [];

  constructor(public auth: AuthService) {}

  onCamerasFound(devs: MediaDeviceInfo[]) {
    console.log('üì∑ C√°maras encontradas:', devs?.length || 0);
    this.devices = devs || [];
    const back = this.devices.find(d => /back|rear|tr√°s|trasera|environment/i.test(d.label || ''));
    this.selectedDevice = back ?? this.devices[0];
    if (this.selectedDevice) {
      console.log('üì∑ C√°mara seleccionada:', this.selectedDevice.label);
    }
  }

  onHasDevices(has: boolean) {
    console.log('üì∑ Tiene dispositivos:', has);
    if (!has) console.warn('No se detectaron c√°maras.');
  }

  onTorchCompatible(compatible: boolean) {
    console.log('üî¶ Flash disponible:', compatible);
    this.torchAvailable = compatible;
  }

  onPermissionResponse(permission: boolean) {
    console.log('üîë Permisos:', permission ? 'Concedidos' : 'Denegados');
    if (!permission) {
      alert('Se requieren permisos de c√°mara para escanear c√≥digos');
    }
  }

  onDeviceSelectChange(event: Event) {
    const select = event.target as HTMLSelectElement;
    const deviceIndex = parseInt(select.value);
    this.selectedDevice = this.devices[deviceIndex];
    console.log('üì∑ Cambiando a c√°mara:', this.selectedDevice?.label);
  }

  onScanSuccess(result: any) {
    // El result puede tener m√°s informaci√≥n que solo el texto
    const text = typeof result === 'string' ? result : result.text || result.getText();
    const format = typeof result === 'object' ? result.format || 'Unknown' : 'Unknown';
    
    const cleaned = text.replace(/^\*+|\*+$/g, '').trim();
    
    // Guardar en la lista de todos los c√≥digos
    this.allScannedCodes.unshift({
      text: cleaned,
      format: format,
      timestamp: new Date()
    });
    
    // Mantener solo los √∫ltimos 10 c√≥digos
    if (this.allScannedCodes.length > 10) {
      this.allScannedCodes = this.allScannedCodes.slice(0, 10);
    }
    
    console.log('üîç =================================');
    console.log('üîç C√ìDIGO DETECTADO');
    console.log('üîç Formato:', format);
    console.log('üîç Texto completo:', cleaned);
    console.log('üîç Longitud:', cleaned.length);
    console.log('üîç Primeros 100 chars:', cleaned.substring(0, 100));
    console.log('üîç =================================');
    
    // Mostrar siempre el √∫ltimo c√≥digo le√≠do
    this.lastResult = cleaned;
    this.lastIgnored = null;
    
    // Buscar patrones conocidos dentro del texto
    this.analyzeScannedText(cleaned);
  }

  analyzeScannedText(text: string) {
    console.log('üîç ANALIZANDO CONTENIDO...');
    
    // Buscar B160495 - STR - 5314 - 1
    const strPattern = /[A-Z]\d{6}\s*-?\s*STR\s*-?\s*\d{4}\s*-?\s*\d+/gi;
    const strMatch = text.match(strPattern);
    if (strMatch) {
      console.log('‚úÖ Encontrado patr√≥n STR:', strMatch);
    }
    
    // Buscar 264019 (No.Doc)
    if (text.includes('264019')) {
      console.log('‚úÖ Encontrado No.Doc: 264019');
    }
    
    // Buscar cualquier secuencia B + 6 d√≠gitos
    const bPattern = /B\d{6}/gi;
    const bMatch = text.match(bPattern);
    if (bMatch) {
      console.log('‚úÖ Encontrado c√≥digo B:', bMatch);
    }
    
    // Buscar STR
    if (text.toUpperCase().includes('STR')) {
      const strIndex = text.toUpperCase().indexOf('STR');
      const context = text.substring(Math.max(0, strIndex - 20), strIndex + 30);
      console.log('‚úÖ Contexto STR:', context);
    }
    
    // Buscar GPOSADAS
    if (text.includes('GPOSADAS')) {
      console.log('‚úÖ Encontrado: GPOSADAS');
    }
    
    console.log('üîç AN√ÅLISIS COMPLETO');
  }

  onScanError(_err: any) {
    // Normal durante el escaneo
  }

  toggleTorch() { 
    this.torchOn = !this.torchOn; 
  }

  logout() { 
    this.auth.logout(); 
  }

  clearHistory() {
    this.allScannedCodes = [];
  }

  copyToClipboard(text: string) {
    navigator.clipboard.writeText(text).then(() => {
      alert('Copiado al portapapeles');
    });
  }
}